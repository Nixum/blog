<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>解决方案 on Nixum Blog</title>
    <link>http://nixum.cc/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
    <description>Recent content in 解决方案 on Nixum Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 01 Oct 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://nixum.cc/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>系统设计</title>
      <link>http://nixum.cc/p/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>http://nixum.cc/p/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</guid>
      <description>[TOC]
思考的维度  明确需求，确定核心功能和非核心功能 容量估算，比如用户数，qps，读写比例，DB存储容量，网络带宽 架构设计，确定有什么模块，服务的定位和功能，DB，缓存，MQ，与外部服务的交互，API与通信协议， 针对某一个模块深入思考细节 扩展设计，需要考虑可靠性、可扩展性、安全性、成本等方面  参考 https://github.com/ByteByteGoHq/system-design-101
https://github.com/checkcheckzz/system-design-interview
https://github.com/ashishps1/awesome-system-design-resources
https://github.com/donnemartin/system-design-primer/blob/master/README-zh-Hans.md</description>
    </item>
    
    <item>
      <title>常见的业务场景解决方案整理</title>
      <link>http://nixum.cc/p/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%95%B4%E7%90%86/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>http://nixum.cc/p/%E5%B8%B8%E8%A7%81%E7%9A%84%E4%B8%9A%E5%8A%A1%E5%9C%BA%E6%99%AF%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%95%B4%E7%90%86/</guid>
      <description>[TOC]
系统设计的思路 缓存、异步、多线程、分片、高可用、扩容、分布式集群、并发、锁不锁、对持久化、内存的要求、量大的就想办法把量过滤或者拆小，分治处理、对数据库的写操作量很大时，可以考虑时间窗口合并
API协议设计 其实分成了API和协议两部分
 一般API会符合Restful规范，由行为 + 资源组合而成； 协议一般就包含了请求/响应头和响应/请求体的内容，参数结构化，比如参数类型是Hash，就不要存成String，值是Hash的序列化后的字符串； 响应结果要统一，尽量不要因为参数的不同而返回不同类型的响应结构，个人比较喜欢的做法是，在网络层面，如果接口没有问题，统一返回HTTP code是200，响应体里分为code、msg、data来表示业务响应； 需要考虑认证和安全相关，比如是否需要签名、票据、token等 多服务之间，保证风格一致； 考虑幂等； 加入版本控制，加在URL上，或者请求头有个字段标识； 接口职责单一，一个接口只干一件事； 考虑兼容性；  解决多重if-else嵌套问题 比如有下面这种代码，优化if-else问题
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21  func Handle() error { var err error if Operation1(){ if Operation2(){ if Operation3(){ if Operation4(){ // do  }else{ err = OPERATION4FAILED } }else{ err = OPERATION3FAILED } }else{ err = OPERATION2FAILED } }else{ err = OPERATION1FAILED } return err }   或者</description>
    </item>
    
  </channel>
</rss>
